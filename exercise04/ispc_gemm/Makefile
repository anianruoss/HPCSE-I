# File       : Makefile
# Created    : Tue Oct 16 2018 10:53:24 AM (+0200)
# Description: Compile targets
# Copyright 2018 ETH Zurich. All Rights Reserved.
CXX ?= g++
CXXFLAGS ?= -Wall -Wextra -pedantic -std=c++11
ISPC ?= ispc
ISPCFLAGS ?= --arch=x86-64

# prec=single --> single precision (32bit floats)
# prec=double --> double precision (64bit floats)
prec ?= double

# debug=true --> use assertions for debugging
debug ?= false

# can be used to pass extra/optional flags from the command line.  (not
# required to solve the exercise)
extra ?=

.PHONY: clean install_ispc_linux_x86_64 job

ifeq ("$(prec)", "single")
CXXFLAGS  += -D_SINGLE_PRECISION_
ISPCFLAGS += -D_SINGLE_PRECISION_
endif

ifeq ("$(debug)", "false")
CXXFLAGS  += -O2 -DNDEBUG
ISPCFLAGS += -O2 -DNDEBUG --opt=disable-assertions
else
CXXFLAGS  += -O0 -g
ISPCFLAGS += -O0 -g
endif

# Main target: compiles the host code and links to gemm_sse2.o and gemm_avx2.o
# which is the code generated by ISPC.  We need to link to them because we make
# references to the vectorized functions in the gemm.cpp application code.
gemm: gemm.cpp gemm_sse2.o gemm_avx2.o
	$(CXX) $(CXXFLAGS) $(extra) -D_USE_ISPC_ -static -m64 -o $@ $^

# Only compile the serial code, ignore everything related to ISPC
gemm_serial: gemm.cpp
	$(CXX) $(CXXFLAGS) $(extra) -o $@ $^

gemm_sse2.o: gemm.ispc
	$(ISPC) $(ISPCFLAGS) $(extra) --target=sse2 -D_ISPC_SSE2_ \
	-o gemm_sse2.o -h gemm_sse2.h $<

gemm_avx2.o: gemm.ispc
	$(ISPC) $(ISPCFLAGS) $(extra) --target=avx2 -D_ISPC_AVX2_ \
		-o gemm_avx2.o -h gemm_avx2.h $<

# before you can use the ispc command, you need to install it.  This target
# does the installation for you.  Note that this installs a Linux 64bit binary,
# it will not work on your local Windows machine.  Use this target on euler or
# your 64bit Linux distribution.  ispc will be installed in ~/bin and the
# directory will also be added to your PATH variable, such that you can use
# ispc the next time you login.
install_ispc_linux_x86_64:
	tar -C ../bin -xJf ../bin/ispc.tar.xz
	mkdir -p ~/bin
	mv ../bin/ispc ~/bin
	echo 'export PATH=$$HOME/bin:$$PATH' >> ~/.bashrc

# You can submit a job on euler using this target.  It depends on the 'gemm'
# target, that is, it will compile the code if there are changes prior to
# submitting the job
job: gemm
	bsub -W 00:15 -n 24 -R fullnode ./gemm

clean:
	rm -f gemm gemm_serial gemm_*.h gemm_*.o gemm_*.s
